// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nsiclass.Data;

namespace Nsiclass.Data.Migrations
{
    [DbContext(typeof(ClassDbContext))]
    partial class ClassDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("isDeleted");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.PartnersLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<bool>("isDeleted");

                    b.HasKey("Id");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Items", b =>
                {
                    b.Property<string>("Classif");

                    b.Property<string>("Version");

                    b.Property<string>("ItemCode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("DescriptionEng")
                        .HasMaxLength(1000);

                    b.Property<string>("DescriptionShort");

                    b.Property<string>("EnteredByUserId");

                    b.Property<DateTime>("EntryTime");

                    b.Property<string>("Includes")
                        .HasMaxLength(5000);

                    b.Property<string>("IncludesMore")
                        .HasMaxLength(5000);

                    b.Property<string>("IncludesNo")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLeaf");

                    b.Property<int>("ItemLevel");

                    b.Property<string>("ModifiedByUserId");

                    b.Property<DateTime?>("ModifyTime");

                    b.Property<int?>("OrderNo");

                    b.Property<string>("OtherCode")
                        .HasMaxLength(1000);

                    b.Property<string>("ParentItemCode");

                    b.HasKey("Classif", "Version", "ItemCode");

                    b.HasIndex("EnteredByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("Classif", "Version", "ParentItemCode");

                    b.ToTable("ClassItems");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Rel_Types", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("DestClassifId")
                        .IsRequired();

                    b.Property<string>("DestVersionId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SrcClassifId")
                        .IsRequired();

                    b.Property<string>("SrcVersionId")
                        .IsRequired();

                    b.Property<DateTime>("Valid_From");

                    b.Property<DateTime?>("Valid_To");

                    b.HasKey("Id");

                    b.HasIndex("DestClassifId", "DestVersionId");

                    b.HasIndex("SrcClassifId", "SrcVersionId");

                    b.ToTable("ClassRelationsTypes");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Rels", b =>
                {
                    b.Property<string>("SrcClassif");

                    b.Property<string>("SrcVer");

                    b.Property<string>("SrcItemId");

                    b.Property<string>("DestClassif");

                    b.Property<string>("DestVer");

                    b.Property<string>("DestItemId");

                    b.Property<string>("RelationTypeId");

                    b.Property<string>("EnteredByUserId");

                    b.Property<DateTime>("EntryTime");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("SrcClassif", "SrcVer", "SrcItemId", "DestClassif", "DestVer", "DestItemId", "RelationTypeId");

                    b.HasIndex("EnteredByUserId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("DestClassif", "DestVer", "DestItemId");

                    b.ToTable("ClassRelations");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Vers", b =>
                {
                    b.Property<string>("Classif");

                    b.Property<string>("Version");

                    b.Property<string>("ByLow")
                        .HasMaxLength(500);

                    b.Property<string>("Parent")
                        .HasMaxLength(50);

                    b.Property<string>("Publications")
                        .HasMaxLength(500);

                    b.Property<string>("Remarks")
                        .HasMaxLength(5000);

                    b.Property<string>("UseAreas")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Valid_From");

                    b.Property<DateTime?>("Valid_To");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.HasKey("Classif", "Version");

                    b.ToTable("ClassVersions");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classifications", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsHierachy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .HasMaxLength(250);

                    b.Property<string>("Remarks")
                        .HasMaxLength(5000);

                    b.Property<bool>("isDeleted");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Nsiclass.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreateUserId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("isDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nsiclass.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Items", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.User", "CreateUser")
                        .WithMany("ItemsCreated")
                        .HasForeignKey("EnteredByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.User", "ModifyUser")
                        .WithMany("ItemsModified")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Vers", "ClassifVersion")
                        .WithMany("Items")
                        .HasForeignKey("Classif", "Version")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Items", "ParentItem")
                        .WithMany("ChildItems")
                        .HasForeignKey("Classif", "Version", "ParentItemCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Rel_Types", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.TC_Classifications", "DestClassification")
                        .WithMany("AsDestClassification")
                        .HasForeignKey("DestClassifId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classifications", "SourceClassification")
                        .WithMany("AsSourceClassification")
                        .HasForeignKey("SrcClassifId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Vers", "DestClassificationVersion")
                        .WithMany("AsDestClassificationVersion")
                        .HasForeignKey("DestClassifId", "DestVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Vers", "SourceClassificationVersion")
                        .WithMany("AsSourceClassificationVersion")
                        .HasForeignKey("SrcClassifId", "SrcVersionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Rels", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.User", "CreateUser")
                        .WithMany("RelsCreated")
                        .HasForeignKey("EnteredByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Rel_Types", "RelationType")
                        .WithMany("Relations")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Items", "DestItem")
                        .WithMany("DestRelations")
                        .HasForeignKey("DestClassif", "DestVer", "DestItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.TC_Classif_Items", "SrcItem")
                        .WithMany("SrcRelations")
                        .HasForeignKey("SrcClassif", "SrcVer", "SrcItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nsiclass.Data.Models.TC_Classif_Vers", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.TC_Classifications", "Classification")
                        .WithMany("Versions")
                        .HasForeignKey("Classif")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nsiclass.Data.Models.User", b =>
                {
                    b.HasOne("Nsiclass.Data.Models.User", "CreateUser")
                        .WithMany("UsersCreated")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nsiclass.Data.Models.Department", "Department")
                        .WithMany("Employies")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
